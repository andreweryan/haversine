pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('GITHUB_CREDENTIALS')
        REPO = "andreweryan/haversine"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', 
                        credentialsId: 'GITHUB_CREDENTIALS', 
                        url: "https://${env.GITHUB_CREDENTIALS_USR}:${env.GITHUB_CREDENTIALS_PSW}@github.com/${REPO}.git"
                }
            }
        }

        stage('Build') {
            steps {
                sh '''
                python3 -m venv venv
                . venv/bin/activate
                which python3
                venv/bin/pip install pytest
                venv/bin/pip install .
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    venv/bin/python -m pytest --junit-xml test-reports/results.xml
                    venv/bin/haversine --coordinates 38.89220430021896 -77.05003345757281 38.892175669253966 -77.02004891843859 --unit kilometers
                '''
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                }
            }
        }

        stage('Determine Release Version') {
            steps {
                script {
                    def latestTag = sh(script: "git describe --tags --abbrev=0 || echo v0.0.0", returnStdout: true).trim()
                    def versionParts = latestTag.replace("v", "").tokenize('.')
                    def newVersion = "v${versionParts[0]}.${versionParts[1]}.${versionParts[2].toInteger() + 1}"
                    env.VERSION = newVersion
                    echo "New release version: ${env.VERSION}"
                }
            }
        }

        stage('Create Git Tag') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                sh '''
                    git config --global user.email "jenkins@localhost"
                    git config --global user.name "Jenkins"
                    git tag -a ${VERSION} -m "Release ${VERSION}"
                    git push origin ${VERSION}
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Release ${VERSION} created successfully!"
        }
        failure {
            echo "❌ Build or tests failed. No release created."
        }
    }
}
